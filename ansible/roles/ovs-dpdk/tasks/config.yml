---
- name: Ensuring config directories exist
  file:
    path: "{{ node_config_directory }}/{{ item.key }}"
    state: "directory"
    recurse: yes
  when:
    - item.value.enabled | bool
    - item.value.host_in_groups | bool
  with_dict: "{{ ovsdpdk_services }}"

- name: Copying over config.json files for services
  template:
    src: "{{ item.key }}.json.j2"
    dest: "{{ node_config_directory }}/{{ item.key }}/config.json"
  register: ovsdpdk_config_jsons
  when:
    - item.value.enabled | bool
    - item.value.host_in_groups | bool
  with_dict: "{{ ovsdpdk_services }}"
  notify:
  - "Restart {{ item.key }} container"

- name: Copying ovs-dpdkctl tool
  copy:
    src: ../tools/ovs-dpdkctl.sh
    dest: "{{ node_config_directory }}/ovsdpdk-db/ovs-dpdkctl.sh"
    mode: 0777

- name: action
  debug:
    var: action

- name: ovs_bridge_mappings
  debug:
    var: ovs_bridge_mappings

- name: ovs_port_mappings
  debug:
    var: ovs_port_mappings

- name: ovs_cidr_mappings
  debug:
    var: ovs_cidr_mappings

- name: ovs_mem_channels
  debug:
    var: ovs_mem_channels

- name: ovs_socket_mem
  debug:
    var: ovs_socket_mem

- name: ovs_hugepage_mountpoint
  debug:
    var: ovs_hugepage_mountpoint

- name: ovs_physical_port_policy
  debug:
    var: ovs_physical_port_policy


- name: debug neutron_external_interface
  debug:
     var: neutron_external_interface

- name: debug dpdk_tunnel_interface
  debug:
     var: dpdk_tunnel_interface

- name: debug hostvars[inventory_hostname]
  debug:
     var: hostvars[inventory_hostname]

- name: debug dpdk_tunnel_interface_network
  debug:
     var: dpdk_tunnel_interface_network

- name: debug dpdk_tunnel_interface_address
  debug:
     var: dpdk_tunnel_interface_address

- name: debug dpdk_tunnel_interface_cidr
  debug:
     var: dpdk_tunnel_interface_cidr
- name: Install ovs-dpdkctl service and config
  become: True
  command: "{{ node_config_directory }}/ovsdpdk-db/ovs-dpdkctl.sh install"
  environment:
    CONFIG_FILE: "{{ node_config_directory }}/ovsdpdk-db/ovs-dpdkctl.conf"
    bridge_mappings: "{{ ovs_bridge_mappings }}"
    port_mappings: "{{ ovs_port_mappings }}"
    cidr_mappings: "{{ ovs_cidr_mappings }}"
    ovs_mem_channels: "{{ ovs_mem_channels }}"
    ovs_socket_mem: "{{ ovs_socket_mem }}"
    hugepage_mountpoint: "{{ ovs_hugepage_mountpoint }}"
    ovs_physical_port_policy: "{{ ovs_physical_port_policy }}"
    dpdk_interface_driver: "{{dpdk_interface_driver}}"

# TODO check the environment change
- name: Check ovs containers
  kolla_docker:
    action: "compare_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ item.value.container_name }}"
    image: "{{ item.value.image }}"
    privileged: "{{ item.value.privileged | default(False) }}"
    volumes: "{{ item.value.volumes }}"
  register: check_ovsdpdk_containers
  when:
    - action != "config"
    - item.value.enabled | bool
    - item.value.host_in_groups | bool
  with_dict: "{{ ovsdpdk_services }}"
  notify:
    - "Restart {{ item.key }} container"
